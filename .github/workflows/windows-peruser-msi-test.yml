name: Windows Per-User MSI Test

on:
  workflow_dispatch:
  push:
    branches:
      - chore/release-checksum

permissions:
  contents: read
  actions: read

jobs:
  per-user-msi:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: peruser-win-cargo-${{ hashFiles('src-tauri/Cargo.lock') }}
          restore-keys: |
            peruser-win-cargo-

      - name: Install dependencies
        run: npm ci

      - name: Build per-user MSI
        # AI Generated: GitHub Copilot - 2025-08-07
        run: npm run tauri build -- -c src-tauri\tauri.windows.conf.json --bundles msi

      - name: Locate MSI
        id: find_msi
        shell: pwsh
        run: |
          $msi = Get-ChildItem -Path src-tauri/target/release/bundle/msi -Filter *.msi -Recurse | Select-Object -First 1
          if (-not $msi) { Write-Error 'MSI not found'; exit 1 }
          Write-Host "Found MSI: $($msi.FullName)"
          echo "msi_path=$($msi.FullName)" >> $env:GITHUB_OUTPUT

      - name: Verify per-user install context
        shell: pwsh
        run: |
          # AI Generated: GitHub Copilot - 2025-08-07
          $msiPath = '${{ steps.find_msi.outputs.msi_path }}'
          Write-Host "Inspecting MSI: $msiPath"
          $installer = New-Object -ComObject WindowsInstaller.Installer
          $database = $installer.GetType().InvokeMember('OpenDatabase',[System.Reflection.BindingFlags]::InvokeMethod,$null,$installer,@($msiPath,0))
          $view = $database.GetType().InvokeMember('OpenView',[System.Reflection.BindingFlags]::InvokeMethod,$null,$database,@("SELECT `Value` FROM `Property` WHERE `Property`='ALLUSERS'"))
          $view.GetType().InvokeMember('Execute',[System.Reflection.BindingFlags]::InvokeMethod,$null,$view,$null) | Out-Null
          $record = $view.GetType().InvokeMember('Fetch',[System.Reflection.BindingFlags]::InvokeMethod,$null,$view,$null)
          if (-not $record) {
            Write-Warning 'ALLUSERS property not present (expected for pure per-user package). Treating as per-user.'
            Write-Host 'Per-user MSI validation passed (ALLUSERS absent).'
            exit 0
          }
          $value = $record.GetType().InvokeMember('StringData',[System.Reflection.BindingFlags]::GetProperty,$null,$record,1)
          Write-Host "ALLUSERS=$value"
          if ($value -eq '1') {
            Write-Error "Detected machine-wide ALLUSERS=1; expected per-user (missing or !=1)."; exit 1
          }
          Write-Host 'Per-user MSI validation passed (ALLUSERS not 1).'

      - name: Upload MSI artifact
        uses: actions/upload-artifact@v4
        with:
          name: per-user-msi
          path: ${{ steps.find_msi.outputs.msi_path }}
          if-no-files-found: error
