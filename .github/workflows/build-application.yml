name: Build Application

# AI Generated: GitHub Copilot - 2025-08-08
# Simplified and validated workflow to avoid zero-job failures and YAML pitfalls
on:
  push:
    branches:
      - main
      - develop
      - chore/**
      - feature/**
      - hotfix/**
      - release/**
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Tauri dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          # AI Generated: GitHub Copilot - 2025-08-08
          # Use strict mode without tracing every command to keep CI logs readable
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev \
            patchelf libglib2.0-dev libsoup2.4-dev libsoup-3.0-dev
          sudo apt-get install -y libjavascriptcoregtk-4.1-dev || true
          sudo apt-get install -y libjavascriptcoregtk-4.0-dev || true
          # Create pkg-config compatibility symlinks for Ubuntu 24.04 naming (4.1 -> 4.0)
          ARCH_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig"
          for pc in webkit2gtk javascriptcoregtk; do
            if [ -f "${ARCH_PATH}/${pc}-4.1.pc" ] && [ ! -f "${ARCH_PATH}/${pc}-4.0.pc" ]; then
              sudo ln -sf "${ARCH_PATH}/${pc}-4.1.pc" "${ARCH_PATH}/${pc}-4.0.pc"
            fi
          done
          # Create library compatibility symlinks (handle .so and .so.0 targets)
          LIB_PATH="/usr/lib/x86_64-linux-gnu"
          for lib in webkit2gtk javascriptcoregtk; do
            if [ ! -f "${LIB_PATH}/lib${lib}-4.0.so" ]; then
              if [ -f "${LIB_PATH}/lib${lib}-4.1.so" ]; then
                sudo ln -sf "${LIB_PATH}/lib${lib}-4.1.so" "${LIB_PATH}/lib${lib}-4.0.so"
              elif [ -f "${LIB_PATH}/lib${lib}-4.1.so.0" ]; then
                sudo ln -sf "${LIB_PATH}/lib${lib}-4.1.so.0" "${LIB_PATH}/lib${lib}-4.0.so"
              fi
            fi
          done
          # Ensure pkg-config can find the .pc files
          echo "PKG_CONFIG_PATH=${ARCH_PATH}:${PKG_CONFIG_PATH:-}" >> "$GITHUB_ENV"

      - name: Install frontend dependencies
        run: npm ci

      - name: Install WiX Toolset (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # AI Generated: GitHub Copilot - 2025-08-08
          choco install wixtoolset --no-progress -y
          # Export WiX bin to PATH for current job
          if (Test-Path Env:WIX) {
            "$env:WIX\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            $wixBin = (Get-ChildItem -Path "C:\\Program Files (x86)\\WiX Toolset*" -Directory |
              Sort-Object Name -Descending | Select-Object -First 1).FullName + "\\bin"
            if (Test-Path $wixBin) { $wixBin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append }
          }
          where.exe candle
          where.exe light

      - name: Build (Windows MSI)
        if: matrix.os == 'windows-latest'
        run: npm run tauri build -- -c src-tauri\tauri.windows.conf.json --bundles msi

      - name: Build (Other platforms)
        if: matrix.os != 'windows-latest'
        run: npm run tauri build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: boxdbuddies-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/**/*
            src-tauri/target/release/boxdbuddies*
          if-no-files-found: warn
